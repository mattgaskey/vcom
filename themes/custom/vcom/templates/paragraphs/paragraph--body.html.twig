{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

{% set inset_align = paragraph.field_flip.value ? 'left' : 'right' %}
{% set spread_class = paragraph.field_spread_paragraphs.value ? 'extra-space' : '' %}

{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    'editorial',
    'editorial--aside-' ~ inset_align,
    view_mode == 'accordion_panel' ? 'js-accordion__panel',
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% set slab_variants = content.field_spacing_variant|render|striptags|trim %}

{% set slab_header_is_present = content.field_headline_group|children != null %}
<div{{ attributes.addClass(classes) }}>
  {% embed '@fractal/slab.twig' with  {
    slab: {
      variant: 'slab--body-padding ' ~ slab_variants
    }
  } %}
    {% block slab_header %}
    {% if slab_header_is_present %}
      <div class="slab__header">
        {{ content.field_headline_group }}
      </div>
    {% endif %}
    {% endblock %}
    {% block slab_content %}
      <div class="slab__content">
        {{ content.contextual_links }}
        {{ content.field_inset }}
        {{ content.field_body|injectclass(spread_class) }}
      </div>
      {% block slab_cta %}{% endblock %}
    {% endblock %}
  {% endembed %}
  
</div>

